/*
 |--------------------------------------------------------------------------
 |  Colors
 |--------------------------------------------------------------------------
 */

@function color($key, $tone: base) {
  @if map-has-key($bk-colors, $key) {
    $getTone: map-get(map-get($bk-colors, $key), $tone);

    @if ($getTone != null) {
      @return map-get(map-get($bk-colors, $key), $tone);
    } @else {
      @warn "'#{$tone}' is not a valid tone in: '#{$key}'";
      @return null;
    }
  }

  @warn "'#{$key}' is not a valid color in: '$bk-colors'";
  @return null;
}

// Shorthand Version
@function c($key, $tone: base) {
  @return color($key, $tone);
}


/*
 |--------------------------------------------------------------------------
 |  Easings
 |--------------------------------------------------------------------------
 */

@function ease($key) {
  @if map-has-key($bk-easings, $key) {
    @return map-get($bk-easings, $key);
  }

  @warn "Unknown '#{$key}' in #{map-keys($bk-easings)}";
  @return null;
}

// Shorthand Version
@function e($key) {
  @return ease($key);
}


/*
 |--------------------------------------------------------------------------
 |  Space
 |--------------------------------------------------------------------------
 */
@function space($key) {
  @return ($bk-gutter * $key);
}

// Shorthand Version
@function s($key) {
  @return space($key);
}

// Spacing Column Width
@function spaceColumn($columns: 0, $context: $bk-colsMax) {
  @if $columns > $bk-colsMax {
    $columns: $bk-colsMax;
  }

  // Col Width
  @if $columns == 0 {
    @return 0;
  } @else {
    @return calc(#{$columns} / #{$context} * 100%);
  }
}

// Shorthand Version
@function sc($columns: 0, $context: $bk-colsMax) {
  @return spaceColumn($columns, $context);
}
